/*
 * Copyright (c) Michael Houston 2020. All rights reserved.
 */

import org.codehaus.groovy.classgen.Verifier

/**
 * DSL Definition for Intellij for DomainEntity additions to the domain classes.
 * Copied from eframe to work-around issue with finding this .gdsl file from inside of a .jar file.
 */
// Great tutorial https://www.tothenew.com/blog/gdsl-awesomeness-introduction-to-gdsl-in-intellij-idea/
// Look at https://stackoverflow.com/questions/49315807/how-to-make-ides-aware-of-addition-to-classes-by-annotations-and-ast-transforma
// Also, groovy doc for type checking extensions to check dynamic logic from annotation> ?
// Also, old code at: https://github.com/joewalnes/idea-community/tree/master/java/java-impl/src/com/intellij/psi/impl
// PSI API (10 ysr old): https://github.com/joewalnes/idea-community/tree/1fa2c45953ed08667da52b1b83d44c56eb83b043/java/openapi/src/com/intellij/psi


//First we need to define a context
def allContext = context()
//new File('c:\\tmp\\out.log') << "X${allContext}\n"

//Now we need to contribute the property to the class
//noinspection GroovyAssignabilityCheck
contribute(allContext) {
  //new File('c:\\tmp\\out.log') << "\nTests ${new Date()}\n"
  //name: Name of the method
  //type: The type of the property, give full class name here or the keyword for native types
  //property(name: "UTCTimeInMills", type: 'long')

  //def memb = enclosingMember()
  // For classes
  //noinspection GroovyUnusedAssignment
  def clazz = enclosingClass()  // For some reason, we need this to make sure the classType is populated correctly.

  //new File('c:\\tmp\\out.log') << "A${classType?.name}, $memb, ${classType?.getClass()} ${classType?.getQualifiedName()} ${classType?.hasAnnotation("org.simplemes.eframe.domain.annotation.DomainEntity")}\n"
  if (classType?.hasAnnotation("org.simplemes.eframe.domain.annotation.DomainEntity")) {
    method name: "save", type: classType?.getQualifiedName(), params: [:]
    method name: "delete", type: classType?.getQualifiedName(), params: [:]
    //method name: "findById", type: "${classType?.getQualifiedName()}", params: [uuid: UUID], isStatic: true
    method name: "list", type: "List<${classType?.getQualifiedName()}>", params: [:], isStatic: true
    method name: "withTransaction", params: [closure: Closure], isStatic: true
    method name: "getRepository", type: "${classType?.getQualifiedName()}Repository", params: [:], isStatic: true
/*
    classType?.fields?.each {
      def params = [:]
      //new File('c:\\tmp\\out.log') << "A${it.dump()}\n"
      //new File('c:\\tmp\\out.log') << "B${it.getTypeElementGroovy().getType().getCanonicalText()}\n"
      params."$it.name" = it.getTypeElementGroovy()?.getType()?.getCanonicalText()
      def methodName = "findBy${Verifier.capitalize(it.name)}".toString()
      //params."${it.name}" = it.getQualifiedName()
      //method name: methodName, params: params, type: classType?.getQualifiedName(), isStatic: true
    }
*/
    // Look for all methods in the repo and make them available here.
    def repoClassName = "${classType?.getQualifiedName()}Repository"
    if (repoClassName) {
      //def Class repoClass = Class.forName(repoClassName)
      //new File('c:\\tmp\\out.log') << "A${findClass(repoClassName).dump()}\n"
      //new File('c:\\tmp\\out.log') << "A${repoClassName}\n"
      def ignoredClassNames = ['java.lang.Object']
      findClass(repoClassName)?.methods?.each { psiMethod ->
        //new File('c:\\tmp\\out.log') << "  A${it.getHierarchicalMethodSignature()}, if.returnTypeElement\n"
        def methodName = psiMethod.nameIdentifier.getText()
        if (!ignoredClassNames.contains(psiMethod.containingClass.qualifiedName)) {
          //new File('c:\\tmp\\out.log') << "${psiMethod.containingClass.qualifiedName}\n"
          def psiParameters = psiMethod.parameters
          def parameters = [:]
          for (int i = 0; i < psiParameters.length; i++) {
            def parameter = psiParameters[i]
            //new File('c:\\tmp\\out.log') << "   ${parameter.name} $parameter.type\n"
            parameters."$parameter.name" = parameter.getType()?.getCanonicalText()
          }
          def returnType = psiMethod.returnType.canonicalText
          if (methodName.startsWith('find') && returnType.startsWith('java.util.Optional<')) {
            // Strip off the Optional<<> if this is a find method.  DomainEntityHelper does this in the runTime.
            returnType = (returnType - "java.util.Optional<") - ">"
          }

          //new File('c:\\tmp\\out.log') << "  $methodName ${psiMethod.returnType} ${psiMethod.parameterList} ${psiMethod.containingClass}\n"
          method name: methodName, params: parameters, type: returnType, isStatic: true
        }
      }
      //delegatesTo(findClass(repoClassName))
    }
    //new File('c:\\tmp\\out.log') << "A${repoClassName}\n"

    // Look for custom field methods.
    def hasCustomFields = false
    classType?.fields?.each { field ->
      //new File('c:\\tmp\\out.log') << "A${field.name} ${field.annotations}\n"
      if (field?.annotations) {
        //new File('c:\\tmp\\out.log') << "A${field.name} ${field.annotations*.qualifiedName}\n"
        if (field.annotations*.qualifiedName.contains('org.simplemes.eframe.data.annotation.ExtensibleFieldHolder')) {
          hasCustomFields = true
          //new File('c:\\tmp\\out.log') << "  ${field.name} ${hasCustomFields}\n"
          return
        }
      }
      //params."$it.name" = it.getTypeElementGroovy()?.getType()?.getCanonicalText()
      //def methodName = "findBy${Verifier.capitalize(it.name)}".toString()
      //params."${it.name}" = it.getQualifiedName()
      //method name: methodName, params: params, type: classType?.getQualifiedName(), isStatic: true
    }
    //new File('c:\\tmp\\out.log') << "${classType.name} ${hasCustomFields}\n"
    if (hasCustomFields) {
      method name: 'getFieldValue', params: [fieldName: String], type: Object
      method name: 'setFieldValue', params: [fieldName: String, value: Object], type: void
      property name: '_customFieldName', type: String, static: true


    }
  }
}
