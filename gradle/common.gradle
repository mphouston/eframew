/*
  Defines common gradle settings, properties and actions used by most builds.
 */

//version "0.5"
group "org.simplemes"

ext {
  // Need to specify this version here since it has non-numeric value.  The gradle.properties file can't seem to handle that.
  //noinspection GroovyAssignabilityCheck
  springSecurityCryptoVersion='5.3.2.RELEASE'


}

// bintray-related properties, common to all modules.
project.ext.bintrayRepoName = 'simplemes-core'
project.ext.bintrayUser = 'simplemes'

// Load the parent composite build's properties, as override for the main settings.
def parentPropFileName="../gradle.properties"
if (System.getProperty('user.dir').endsWith('simplemes-core')) {
  // Handle the case when we are running the composite build from the main directory.
  parentPropFileName="gradle.properties"
}
def compositePropFile = new File(parentPropFileName)
if (compositePropFile.exists()) {
  Properties props = new Properties()
  InputStream ins = new FileInputStream(compositePropFile)
  props.load(ins)
  ins.close()
  props.each {k,v ->
    logger.info("Using property '$k' to '$v' from $compositePropFile")
    try {
      project.setProperty(k,v)
    } catch (Exception ignored) {
      logger.info("Could not override property '$k' to '$v' from $compositePropFile")
    }
  }
}

//println "in common setup, module = ${moduleName}, version = ${project.version}, micronaut = ${micronautBomVersion}"
//println "user.dir = ${System.getProperty('user.dir')}, root = ${rootProject.name}"

dependencies {
  implementation "io.micronaut:micronaut-http-client"
  implementation "io.micronaut:micronaut-http-server-netty"
  implementation "io.micronaut.groovy:micronaut-runtime-groovy"
  implementation "io.micronaut:micronaut-validation"
  implementation "io.micronaut:micronaut-inject-groovy"
  implementation "io.micronaut:micronaut-management"
  implementation "io.micronaut.views:micronaut-views-freemarker"
  implementation "org.freemarker:freemarker:$freemarkerVersion"
  implementation "ch.qos.logback:logback-classic:$logbackVersion"

  implementation "io.micronaut.security:micronaut-security-jwt"
  implementation "org.codehaus.groovy:groovy-templates" // Added for Groovydoc and TextUtils.
  implementation "org.codehaus.groovy:groovy-xml:$groovyVersion"
  implementation "org.codehaus.groovy:groovy-dateutil"
  implementation ( "com.bertramlabs.plugins:asset-pipeline-micronaut:$assetPipelineVersion") {
    exclude group: "io.micronaut", module: "http-server-netty"
  }
  implementation ( "com.bertramlabs.plugins:asset-pipeline-core:$assetPipelineVersion")
  implementation "org.springframework.security:spring-security-crypto:${springSecurityCryptoVersion}"
  implementation "commons-logging:commons-logging:1.2"

  implementation "jakarta.persistence:jakarta.persistence-api:${jakartaJPAVersion}"
  implementation "io.micronaut.data:micronaut-data-processor:$micronautDataVersion"
  implementation "io.micronaut.data:micronaut-data-jdbc:$micronautDataVersion"
  runtimeOnly 'io.micronaut.sql:micronaut-jdbc-hikari'
  implementation("io.micronaut.flyway:micronaut-flyway")
  implementation("io.micronaut.micrometer:micronaut-micrometer-registry-prometheus")

  // Needed for groovydoc tasks.
  implementation ("com.github.javaparser:javaparser-core:3.15.17")

  testImplementation "org.codehaus.groovy:groovy-json"
  testImplementation "org.codehaus.groovy:groovy-test"
  testImplementation "io.micronaut.test:micronaut-test-spock"

  implementation( "org.spockframework:spock-core") {
    exclude group: "org.codehaus.groovy", module: "groovy-all"
  }
  implementation("org.spockframework:spock-core") {
    exclude group: "org.codehaus.groovy", module: "groovy-all"
  }
  implementation ("org.gebish:geb-spock:$gebVersion") {
    exclude (group: "org.codehaus.groovy", module: "groovy-all")
    transitive = true
  }
  testImplementation("org.gebish:geb-spock:$gebVersion") {
    exclude (group: "org.codehaus.groovy", module: "groovy-all")
    transitive = true
  }
  implementation "cglib:cglib-nodep:$cglibVersion"
  implementation "org.objenesis:objenesis:$objenesisVersion"
  implementation "net.bytebuddy:byte-buddy:$byteBuddyVersion"

  implementation "org.seleniumhq.selenium:selenium-chrome-driver:$webDriversVersion"
  implementation "org.seleniumhq.selenium:selenium-firefox-driver:$webDriversVersion"
  implementation "org.seleniumhq.selenium:selenium-api:$webDriversVersion"
  implementation ("org.seleniumhq.selenium:selenium-support:$webDriversVersion"){
    exclude group:  "net.bytebuddy", module: "byte-buddy"  // Conflicts with Spock
  }

  implementation group: 'org.postgresql', name: 'postgresql', version: '42.2.14'


  implementation "org.elasticsearch.client:elasticsearch-rest-client:$elasticSearchClient"

  // The Jasper reports library with PDF support (lowagie) and DejaVu fonts
  implementation("net.sf.jasperreports:jasperreports:$jasperreportsVersion"){
    exclude module:'commons-logging'
    exclude module:'olap4j'
    exclude module: 'itext' //exclude itext:2.1.7js5 which is not available in jcenter or maven central
  }
  implementation ("com.lowagie:itext:$lowagieItextVersion") {
    exclude group: 'bouncycastle'
  }
  implementation("net.sf.jasperreports:jasperreports-fonts:$jasperreportsVersion")
  // https://mvnrepository.com/artifact/net.sourceforge.barbecue/barbecue
  implementation group: 'net.sourceforge.barbecue', name: 'barbecue', version: barbecueVersion

  test {
    useJUnitPlatform()  // Forces Junit5 for Spock in Gradle tests.
    jvmArgs = ['-Dnashorn.args="--no-deprecation-warning"']  // Suppress Javascript engine deprecation warning
    // Force STDOUT to echo in github server.
    testLogging.showStandardStreams = true
  }

}



assets {
  maxThreads = 4
  packagePlugin=false  // Can't use Grails plugin scheme here.
}

run.jvmArgs('-noverify', '-XX:TieredStopAtLevel=1')

groovydoc {
  destinationDir = new File("${project.projectDir}/${project.docsDir}/groovydoc")
  source = [sourceSets.main.groovy,sourceSets.main.java]
}

// Copy the index file (if it exists) to the parent folder for deployment to the doc server.
task copyDocIndex(type: Copy) {
  from file('../staging/docs/eframe/index.html')
  into file('../staging/docs')
}

// Copy the ICO file (if it exists) to the parent folder for deployment to the doc server.
task copyDocICO(type: Copy) {
  from file('../staging/docs/eframe/images/common/books_favicon.ico')
  into file('../staging/docs/images/common')
}

asciidoctor.finalizedBy([copyDocIndex,copyDocICO])

allprojects {
  tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
  }
}

// Disable compilation of Java and Groovy due to classpath issues when groovyDoc is used.
gradle.taskGraph.whenReady { graph ->
  if (graph.hasTask(':groovydoc')) {
    compileGroovy.enabled = false
    compileJava.enabled = false
  }
}

test{
  systemProperty 'writeTests', System.getProperty('writeTests')
}

dependencyCheck {
  // For the dependencyCheckAnalyze to find security issues in libraries.
  format='ALL' // the default is HTML only
}

tasks.withType(Test) {
  systemProperty "geb.env", System.getProperty('geb.env')
  systemProperty "webdriver.chrome.driver", System.getProperty('webdriver.chrome.driver')
  systemProperty "webdriver.gecko.driver", System.getProperty('webdriver.gecko.driver')
}


//def backend =  'html5'
def imagesBuildDir = 'images'

// Use -PbackendProp=pdf to generate the PDF.
// Fixes some issues with images in PDF generation.  You must run the HTML docs first for this to work.
// It appears the PDF generator expects the diagram images in a specific directory.
// The imagesBuildDir will point to the location of the HTML generated docs images directory.
// This work around may only work with diagrams two layers down (e.g. in guide/introduction).
////workaround for https://github.com/asciidoctor/asciidoctor-pdf/issues/271
// TODO: Fix this
/*
if (hasProperty('backendProp') && backendProp == 'pdf') {
  //println "backendProp = $backendProp"
  backend = backendProp
  imagesBuildDir = "../../../../../staging/docs/${moduleName}/html5/images"
}
*/

task generateExtensionDoc(type:JavaExec) {
  main = "org.simplemes.eframe.application.ExtensionPointDocumentExtractor"
  classpath = sourceSets.main.runtimeClasspath
  description 'Generates the extensions.adoc from all ExtensionPoints'
}

asciidoctor {
  baseDir "src/main/docs/asciidoc"
  sourceDir "src/main/docs/asciidoc"
  sources {
    include 'guide.adoc'
    include 'reference.adoc'
    include 'index.adoc'
    include 'tutorial.adoc'
  }
  outputDir "${project.docsDir}"
  options doctype: 'book', ruby: 'erubis'
  //backends=['html5', 'pdf']
  //backends = [backend]
  //println "inHTML $backend"

  //noinspection GroovyAssignabilityCheck
  attributes 'source-highlighter': 'coderay',
             //toc: 'auto',
             'imagesdir-build': imagesBuildDir,
             idprefix: '',
             'project-version': project.version,
             stylesheet: "${projectDir}/src/main/docs/asciidoc/resources/asciidoctor.css",
             sectlinks: true,
             idseparator: '-'
}

asciidoctorj {
  modules {
    diagram.use()
  }
}


// Module publishing task setup.
project.ext.pomConfig = {
  licenses {
    license {
      name "GNU GPL 3.0"
      url "http://www.webix.com/"
      distribution "repo"
    }
  }
  developers {
    developer {
      id "mphouston"
      name "Mike Houston"
      email "dev@simplemes.org"
    }
  }

  scm {
    url "https://github.com/simplemes/simplemes-core"
  }
}


task sourcesJar(type: Jar, dependsOn: classes) {
  classifier 'sources'
  from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier 'javadoc'
  from groovydoc.destinationDir
}

artifacts {
  archives sourcesJar
  archives javadocJar
}

publishing {
  publications {
    mavenPublication(MavenPublication) {
      from components.java
      artifact sourcesJar {
        classifier "sources"
      }
      artifact javadocJar {
        classifier "javadoc"
      }
      groupId 'org.simplemes'
      artifactId moduleName
      version project.version
      //println "pom = $pom"
      pom.withXml {
        def root = asNode()
        // Work around for Duplicated tag: 'dependencyManagement' exception due to extra node for dependencyManagement.
        // Must remove it manually.
        def dpmNode = root.children().find {it.name()=='dependencyManagement'}
        if (dpmNode) {
          root.remove(dpmNode)
        }
        root.appendNode('description', moduleDescription)
        root.appendNode('name', moduleDescription)
        root.appendNode('url', 'https://github.com/simplemes/simplemes-core')
        root.children().last() + pomConfig
      }
    }
  }
}

/*
task fixPom {
  doLast {
    File file = new File("$buildDir/publications/mavenJava/pom-default.xml")
    def text = file.text
    println "text = $text"
    def pattern = "(?s)(<dependencyManagement>.+?<dependencies>)(.+?)(</dependencies>.+?</dependencyManagement>)"
    Matcher matcher = text =~ pattern
    if (matcher.find()) {
      text = text.replaceFirst(pattern, "")
      def firstDeps = matcher.group(2)
      text = text.replaceFirst(pattern, '$1$2' + firstDeps + '$3')
    }
    file.write(text)
  }
}
generatePomFileForMavenJavaPublication.finalizedBy fixPom

*/

// Bintray upload setup
// See https://github.com/bintray/gradle-bintray-plugin#Plugin_DSL for syntax.
bintray {
  user = bintrayUser
  key = System.getProperty('bintray_key')
  publications = ['mavenPublication']

  dryRun = false //[Default: false] Whether to run this as dry-run, without deploying
  publish = true //[Default: false] Whether version should be auto published after an upload
  override = true //[Default: false] Whether to override version artifacts already published

  pkg {
    repo = bintrayRepoName
    name = moduleName
    //userOrg = 'simplemes.org'
    licenses = ['GPL-3.0']
    vcsUrl = 'https://github.com/simplemes/simplemes-core.git'
    version {
      name = project.version
      desc = moduleDescription
      released  = new Date()
    }
  }

}

task npmBuild(type: Exec, group: 'build', description: 'Builds the npm client module') {
  workingDir("${project.file("src/client/eframe")}")
  if (System.getProperty("os.name").toLowerCase().contains("windows"))
    commandLine("cmd.exe", "/C", "npm.cmd run build -- --dest ../../main/resources/client/eframe")
  else // assume *nix.
    commandLine("npm", "run", "build") //
}




