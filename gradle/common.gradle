/*
  Defines common gradle settings, properties and actions used by most builds.
 */

version "0.5"
group "org.simplemes"

ext {
  //noinspection GroovyAssignabilityCheck
  springSecurityCryptoVersion='4.2.5.RELEASE'
}



// bintray-related properties, common to all modules.
project.ext.bintrayRepoName = 'simplemes-core'
project.ext.bintrayUser = 'simplemes'

// Load the parent composite build's properties, as override for the main settings.
def parentPropFileName="../gradle.properties"
if (System.getProperty('user.dir').endsWith('simplemes-core')) {
  // Handle the case when we are running the composite build from the main directory.
  parentPropFileName="gradle.properties"
}
def compositePropFile = new File(parentPropFileName)
if (compositePropFile.exists()) {
  Properties props = new Properties()
  InputStream ins = new FileInputStream(compositePropFile)
  props.load(ins)
  ins.close()
  props.each {k,v ->
    logger.info("Using property '$k' to '$v' from $compositePropFile")
    try {
      project.setProperty(k,v)
    } catch (Exception ignored) {
      logger.info("Could not override property '$k' to '$v' from $compositePropFile")
    }
  }
}

println "in common setup, module = ${moduleName}, version = ${project.version}, micronaut = ${micronautBomVersion}"
//println "user.dir = ${System.getProperty('user.dir')}, root = ${rootProject.name}"



assets {
  maxThreads = 4
  packagePlugin=false  // Can't use Grails plugin scheme here.
}

run.jvmArgs('-noverify', '-XX:TieredStopAtLevel=1')

groovydoc {
  destinationDir = new File("${project.docsDir}/html5/groovydoc")
  source = [sourceSets.main.groovy,sourceSets.main.java]
}

allprojects {
  tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
  }
}

// Disable compilation of Java and Groovy due to classpath issues when groovyDoc is used.
gradle.taskGraph.whenReady { graph ->
  if (graph.hasTask(':groovydoc')) {
    compileGroovy.enabled = false
    compileJava.enabled = false
  }
}

test{
  systemProperty 'writeTests', System.getProperty('writeTests')
}

dependencyCheck {
  // For the dependencyCheckAnalyze to find security issues in libraries.
  format='ALL' // the default is HTML only
}

// GEB Testing settings
webdriverBinaries {
  chromedriver '2.40'
  geckodriver '0.21.0'
}

tasks.withType(Test) {
  systemProperty "geb.env", System.getProperty('geb.env')
  systemProperty "webdriver.chrome.driver", System.getProperty('webdriver.chrome.driver')
  systemProperty "webdriver.gecko.driver", System.getProperty('webdriver.gecko.driver')
}

// The ASCIIDOCTOR related tasks.
asciidoctorj {
  version = '1.5.4'
}

def backend =  'html5'
def imagesBuildDir = 'images'

// Use -PbackendProp=pdf to generate the PDF.
// Fixes some issues with images in PDF generation.  You must run the HTML docs first for this to work.
// It appears the PDF generator expects the diagram images in a specific directory.
// The imagesBuildDir will point to the location of the HTML generated docs images directory.
// This work around may only work with diagrams two layers down (e.g. in guide/introduction).
////workaround for https://github.com/asciidoctor/asciidoctor-pdf/issues/271
if (hasProperty('backendProp') && backendProp == 'pdf') {
  //println "backendProp = $backendProp"
  backend = backendProp
  imagesBuildDir = "../../../../../staging/docs/${moduleName}/html5/images"
}

asciidoctor {
  //sourceDir "${projectDir}/src/docs/asciidoc"
  //println "${projectDir}/src/docs/asciidoc"
  sourceDir "src/main/docs/asciidoc"
  sources {
    include 'guide.adoc'
    include 'reference.adoc'
    //include 'allElements.adoc'
    //include 'convBook.adoc'
    //include 'convReference.adoc'
  }
  outputDir "${project.docsDir}"
  options doctype: 'book', ruby: 'erubis'
  //backends=['html5', 'pdf']
  backends = [backend]
  //println "inHTML $backend"

  //noinspection GroovyAssignabilityCheck
  attributes 'source-highlighter': 'coderay',
             toc: 'auto',
             'imagesdir-build': imagesBuildDir,
             idprefix: '',
             'project-version': project.version,
             stylesheet: "${projectDir}/src/main/docs/asciidoc/resources/asciidoctor.css",
             sectlinks: true,
             idseparator: '-'

  // Diagram support
  if (!project.hasProperty('ignoreJrubyPrepareGems')) {
    //println "still jruby"
    dependsOn jrubyPrepareGems
  }
  jrubyPrepareGems.outputDir = new File((String) "${projectDir}/tmp/gems")   // Keep GEMs out of the build directory.
  gemPath = jrubyPrepareGems.outputDir
  requires = ['asciidoctor-diagram']
}



// Module publishing task setup.
project.ext.pomConfig = {
  licenses {
    license {
      name "GNU GPL 3.0"
      url "http://www.webix.com/"
      distribution "repo"
    }
  }
  developers {
    developer {
      id "mphouston"
      name "Mike Houston"
      email "dev@simplemes.org"
    }
  }

  scm {
    url "https://github.com/simplemes/simplemes-core"
  }
}


task sourcesJar(type: Jar, dependsOn: classes) {
  classifier 'sources'
  from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier 'javadoc'
  from groovydoc.destinationDir
}

artifacts {
  archives sourcesJar
  archives javadocJar
}

publishing {
  publications {
    mavenPublication(MavenPublication) {
      from components.java
      artifact sourcesJar {
        classifier "sources"
      }
      artifact javadocJar {
        classifier "javadoc"
      }
      groupId 'org.simplemes'
      artifactId moduleName
      version project.version
      pom.withXml {
        def root = asNode()
        root.appendNode('description', moduleDescription)
        root.appendNode('name', moduleDescription)
        root.appendNode('url', 'https://github.com/simplemes/simplemes-core')
        root.children().last() + pomConfig
      }
    }
  }
}


// Bintray upload setup
// See https://github.com/bintray/gradle-bintray-plugin#Plugin_DSL for syntax.
bintray {
  user = bintrayUser
  key = System.getProperty('bintray_key')
  publications = ['mavenPublication']

  dryRun = false //[Default: false] Whether to run this as dry-run, without deploying
  publish = true //[Default: false] Whether version should be auto published after an upload
  override = true //[Default: false] Whether to override version artifacts already published

  pkg {
    repo = bintrayRepoName
    name = moduleName
    //userOrg = 'simplemes.org'
    licenses = ['GPL-3.0']
    vcsUrl = 'https://github.com/simplemes/simplemes-core.git'
    version {
      name = project.version
      desc = moduleDescription
      released  = new Date()
    }
  }

}


