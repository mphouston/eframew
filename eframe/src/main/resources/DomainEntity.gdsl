import org.codehaus.groovy.classgen.Verifier

/*
 * Copyright Michael Houston 2019. All rights reserved.
 * Original Author: mph
 *
*/

/**
 *
 */
// TODO: Look at https://stackoverflow.com/questions/49315807/how-to-make-ides-aware-of-addition-to-classes-by-annotations-and-ast-transforma
// Also, groovy doc for type checking extensions to check dynamic logic from annotation> ?
//First we need to define a context
def allContext = context()
//new File('c:\\tmp\\out.log') << "X${allContext}\n"

//Now we need to contribute the property to the class
contribute(allContext) {
  //new File('c:\\tmp\\out.log') << "\nTests ${new Date()}\n"
  //name: Name of the method
  //type: The type of the property, give full class name here or the keyword for native types
  //property(name: "UTCTimeInMills", type: 'long')

  //def memb = enclosingMember()
  // For classes
  def clazz = enclosingClass()  // For some reason, we need this to make sure the classType is populated correctly.

  //new File('c:\\tmp\\out.log') << "A${classType?.name}, $memb, ${classType?.getClass()} ${classType?.getQualifiedName()} ${classType?.hasAnnotation("org.simplemes.eframe.domain.annotation.DomainEntity")}\n"
  if (classType?.hasAnnotation("org.simplemes.eframe.domain.annotation.DomainEntity")) {
    method name: "save", type: classType?.getQualifiedName(), params: [:]
    method name: "delete", type: classType?.getQualifiedName(), params: [:]
    method name: "findById", type: "${classType?.getQualifiedName()}", params: [uuid: UUID], isStatic: true
    method name: "list", type: "List<${classType?.getQualifiedName()}>", params: [:], isStatic: true
    method name: "withTransaction", params: [closure: Closure], isStatic: true
    // TODO: Check the annotation for the repository name in case of overrides.
    method name: "getRepository", type: "${classType?.getQualifiedName()}Repository", params: [:], isStatic: true
    // TODO: Filter findBy() with methods from repository?
    classType?.fields?.each {
      def params = [:]
      //new File('c:\\tmp\\out.log') << "A${it.dump()}\n"
      //new File('c:\\tmp\\out.log') << "B${it.getTypeElementGroovy().getType().getCanonicalText()}\n"
      params."$it.name" = it.getTypeElementGroovy().getType().getCanonicalText()
      def methodName = "findBy${Verifier.capitalize(it.name)}".toString()
      //params."${it.name}" = it.getQualifiedName()
      method name: methodName, params: params, type: classType?.getQualifiedName(), isStatic: true
    }
  }
}
