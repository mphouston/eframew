Scratch
=======

Questions
---------
No default dashboard found.  Maybe add link on error message to run demoData?
Enum need varying in DB?  All limited length fields need varchar()?  Maybe length too short?
Add pothole for missing transactionManager (Synch or Asynch) means no DB info in the .yml file.
TaskMenu - Refresh with dev mode?
How are keys defined in domains?  fieldOrder then keys.
No fieldOrder, find by key on CRUDRest does a 'find by null()'.
  Keys has field name that does not exist, gives ugly message.
Add Getting Started section to Domains/GUIS/Controllers/Services.
  Template/Getting Started with Domains?
TaskMenu without folder disappears.
GUI with single field.

Custom Field Rework
--------------------
Tasks
=====
  Change when JSON is serialized/deserialized.  Tests when loaded/saved.
  Simplify ExtensibleFieldTransform:
    Remove prefix/config type support.
    Add Map holder field (_fields) for fields.  Tracks if dirty or not.
      This Map is used for most actions.
      String getFields() will serialize the Map contents if dirty, otherwise use value from field..
  Remove prefix from ExtensibleFieldHelper.set/getFieldValue().
  Change configType to remove prefix.
    Update Assembly docs with assemblyData prefix in examples.
  Add API for adding value to fields.  Supports tracking options.
    Test with tracking and Rest API updates?
    Update docs for mes-core, assy with API custom examples.
  Dirty Map ready for saving.
    FieldHolderMap - put() marks as dirty.  Has Text ready for saving.  Dirty= changedSinceLastJsonSerialize.
      new method put(name,value,CustomFieldConfig).
  REST API - Disable _config export/import by default.  Some mechanism to enable it on get?
    Add URI with UUID for the get responses?
  Archive works - full history preserved.
  FieldHolderMap - Prevent storing unsupported types?
  Option to force Flex Type/DE/FE field definitions before collection?

  CustomFieldConfig - interface
    CustomFieldTracking tracking - enum
    format - FieldFormat - null if type can be inferred from JSON (String, Number/DigDecimal, Boolean).
  Fix adocs to match impl: fieldExtension.adoc:184 history/type/config example.
  Add fix for undetected missed update. See  https://github.com/micronaut-projects/micronaut-data/issues/299
  Add validation on Custom Field creation that prevents save if the name matches a core field.  Do in FieldExtension?

Domain/POGO:
  setFields(Map)
  setFields(String json)
  Map getFields()
  Test Scenarios
    Set value on empty map, save
      With and without config (e.g. FlexType or FieldExtension).
    Set value on populated map, save
      With and without config (e.g. FlexType or FieldExtension).
    Overwrite value on populated map, save
      With and without config (e.g. FlexType or FieldExtension).

    Read record, get value.
    Read record, update value, get value, save.
      With and without config (e.g. FlexType or FieldExtension).

    Round-trip - with types (DateOnly, Date, DomainRef, Enum, EncodedValue,ConfigurableType?).
    Round-trip - Update with value only history.
    Round-trip - Update with value details history.
    Round-trip - With config change (no history to full history).


FieldHolderMapInterface: Front-end to JSON-backed text.  Retains type and tracking info.  Tracks history.
  isDirty/setDirty - If Map has changes since last parseJSON()
  parseJSON() - converts from text.
  toJSON() - serializes to JSON
  put()/get() - retains type info, track details option.
  setTracking(name, value='L' (A/V/L))
  setType(name, format)
  getFieldsMap() - Delegates to helper.  Parse JSON if text is available.
  no clear?
  JSONAwareMapConfig - Holds config and history or just a simple Map with logic in JSONAwareMap?
  Transform needs:
   x map field with lazy getter/setter?  ExtensibleFieldHelper.getMap()/setMap()
  ExtensibleFieldHelper needs:
   change to getFieldValue to support map.
   parses JSON on first get() with pending json
   text field setFields() will null out map to indicate pending.  Called by JDBC.
   text field getFields() will serialize dirty Map.  Called by JDBC.


API:
{
  "rma": "R10102-23",
  "qty": 12.2,
  "fields" : {
    "retailerID": "ACME-101",
    "returnCode": "DEFECTIVE"
  }
}

{
  "order": "M1001",
  "lsn": {
    "lsn": "SN2037"
  },
  "component": "CPU",
  "qty": 47.2,
  "assemblyData": "VENDOR_AND_LOT",
  "fields" : {
    "LOT": "ACME-101",
    "VENDOR": "ACME"
  }
}

In fields, store config for each name field:
  "fields" : {
    "_retailerID_config": {"tracking": "ALL_VALUES", "type": "D"},  // ALL_DETAILS - (Who/what/when/where stored in element "_retailerID_history")
    "retailerID": "ACME-101",
    "_returnCode_config": {"tracking": "LATEST"},  // Default ALL_VALUES (values only)
    "returnCode": "DEFECTIVE"
  }
  Option 2 - 3 top-level arrays.
  "fields": {
    "retailerID": "ACME-101",
    "returnCode": "DEFECTIVE",
    "_types": [
      {
        "retailerID": "D",
        "returnCode": "R"
      }
    ],
    "_tracking": [
      {
        "retailerID": "A",
        "returnCode": "V"
      }
    ],
    "_history": {
      "weight": [
        {
          "weight": 2.3,
          "user": "PWB",
          "dateTime": "2009-02-13T18:31:30.000-05:00"
        },
        {
          "weight": 2.2,
          "user": "MPH",
          "dateTime": "2009-02-13T18:31:30.000-05:00"
        },
        {
          "weight": 2.1,
          "user": "RLB",
          "dateTime": "2009-02-14T17:23:53.000-05:00"
        }
      ]
    }
  }
  Option 3 - One map of config values.
    "fields": {
      "color": "123A",
      "returnCode": "DEFECTIVE",
      "_config": {
        "color": {
          "type": "S",
          "tracking": "A",
          "valueClassName": "o.s....",  // Domain Reference, enum, EncodedValue
          "history": {
            "color": [
              {
                "color": "122B",
                "user": "PWB",
                "dateTime": "2009-02-13T18:31:30.000-05:00"
              },
              {
                "color": "121A",
                "user": "MPH",
                "dateTime": "2009-02-13T18:31:30.000-05:00"
              },
              {
                "color": "123C",
                "user": "RLB",
                "dateTime": "2009-02-14T17:23:53.000-05:00"
              }
            ]
          }
        },
        "returnCode": {}
      }
    }


Data Entry
==========
Always allow data to be logged via API without setup.
Define DE fields to be collected at specific places/events against order/LSN.
Flag to trace all values collected (Latest Value Only, All Values, All Data (Who/what/when/where).
Events:
  Pre/Post Start/Complete/Done
  For Product
  For Specific Steps.
Add to Traveller and Order History Reports.
Flex Type setup is for prompting.


Tasks
=====
ISSUE: API: Look at just sending fields jsonb as sub-JSON instead of naming conventions and special logic.
ISSUE: Support in non-CRUD endpoint with Domain as part of request.
ISSUE: JSON Mapper ignores invalid fields on input (non-CRUD endpoint).

Scan Dashboard - Input field for use with phone keyboard.
Traveller report shows M1001 not current order.
Call generateExtensionDoc (e.g. generateExtensionDocAll) in main .gradle and in gradle.yml
Taskmenu refresh logic.
  Part of page?
  Does not see Dashboard records in production when demoData loaded later.  Maybe add TaskMenuHelper.clearCache() to be called from demoData,
         Maybe add timer to TaskMenuHelper caching.
  First time Error:
    15:45:23.946 [io-executor-thread-1] ERROR client.status - {"stack":"TypeError: Cannot read property '$count' of undefined\n    at u.open (http://localhost:8080/assets/webix.min-8552d835cbf5b3abaf68708dafab6317.js:54:3610)\n    at Object._taskMenuToggle (http://localhost:8080/assets/eframe_toolkit-3dc5bcb2d6177a3b65bacfddb98b8320.js:35:389)\n    at eval (eval at v (http://localhost:8080/assets/webix.min-8552d835cbf5b3abaf68708dafab6317.js:10:561), <anonymous>:1:4)\n    at eval (<anonymous>)\n    at v (http://localhost:8080/assets/webix.min-8552d835cbf5b3abaf68708dafab6317.js:10:561)\n    at Object.<anonymous> (http://localhost:8080/assets/webix.min-8552d835cbf5b3abaf68708dafab6317.js:18:838)\n    at Object.callEvent (http://localhost:8080/assets/webix.min-8552d835cbf5b3abaf68708dafab6317.js:10:2053)\n    at y (http://localhost:8080/assets/webix.min-8552d835cbf5b3abaf68708dafab6317.js:10:2695)\n    at HTMLBodyElement.<anonymous> (http://localhost:8080/assets/webix.min-8552d835cbf5b3abaf68708dafab6317.js:19:365)","message":"Cannot read property '$count' of undefined","name":"TypeError","logData":{"msg":"Uncaught Exception","errorMsg":"Uncaught TypeError: Cannot read property '$count' of undefined","url":"http://localhost:8080/assets/webix.min-8552d835cbf5b3abaf68708dafab6317.js","line number":54,"column":3610}} ip=/172.17.0.1:42348
Groovy extension GUI with hooks?
Ask question updating suggest on Webix forums.
Check out JaCoCo https://www.jacoco.org/jacoco/trunk/doc/ and gradle plugin.
Figure out automatic shift to upper case on input.  Which fields?  Toggle?
Support JWT as Authorization header with std OAuth access token support.



Globals - Theme?
Fix mess with efForm.dashboard.  Support type='dashboard', 'buttonHolder' and 'dialog'.
Consider moving to use of status UNAUTHORIZED vs. FORBIDDEN.
Issue 672 Still broken.  Update project ref-issue to 2.1.3 and verify that it is still broken.
Add workaround for update failure: 299.  Remove sop.
Version and opt locking (custom JDBCOperations).
Cascading updates.  Find some way to prevent? - isDirty or save() option?
Is Repository findByUuid() and findAll() needed?  Use CrudRepository.findById() and .findAll()?

Support cache in specific use cases:
  UserPreferences - timed, any update for user flushed cache? done in PreferenceHolder?
  FieldExtension/GUI - Already cached at the domainUtils level with FieldGUIExtension via ExtensibleFieldHelper
  Others as needed.

  Support for MPE?
  Check Search in CrudGUITester and add to definition list logic/controller.
  Look into Jackson skipping foreign references.  Only need key and ID fields to import.
  Simplify Client.javascript to one per Controller by default -  Add GUI test of logging level in EFrameJSLoggingGUISpec.
  Add E2E test for optimistic locking detection.  In definition GUIs.
  Reports
    Test in MES app.

  Bugs:
    Definition List boolean checkbox not centered.
    Definition List key field allows HTML un-escaped in it.
    Show Page with name="<script>alert('bad')</script>" fails with Javascript syntax error in SampleParent.
    Edit/Create? page save failures.  Fixing problem and re-saving value gives error (Invalid UUID string: null)
  Look at using https://github.com/apps/whitesource-bolt-for-github for CVE library scanning.
    Others: https://dzone.com/articles/8-free-security-tools-every-developer-should-know
  Reports
    Still an issue?  Can't reproduce in simple query.  Fix issue with date ranges error by TZ offset?


MES Demo Release Requirements
-----------------------------
  Reports
    WIP


Task Before MES work
  Dashboards/Questions from nested code
  Addition modules
    Global Toggles?
  Themes - Including fixes to 'TBD: Needs different value for theme.' notes.
  Periodic Archiving


UI

Old Notes
==========
Setup
----------
GIT server
  cd /opt/git/smes
  mkdir eframe.git
  cd eframe.git
  git init --bare
MN Create
   cd smes
   mn create-app eframe -l groovy -f spock,hibernate-gorm,management
IDEA
  New Project from Existing Sources (default for all)
  Import Gradle.
  Remove second-level eframe module in IDEA.
  Edit build.gradle (import sources).
  Move Application.groovy to correct package.
GIT Setup
  cd eframe
  git init
  git remote add origin mphouston@s:/opt/git/smes/eframe.git
  git clone ssh://mphouston@s:/opt/git/smes/eframe.git
  Added master section to .git/config


Make Module for Distr.
=====================
Delete from .jar
  Application.class
  logback.xml

UI
==
UI Toolkit Module (two flavors: JQX and HTML).


Notes on Micronaut investigation


Key Missing Features
====================

Persistence - CRUD and ad-hoc
  Txn
  Foreign Keys
Message Broker (with Saga/undo support)
Custom Fields
Client Asset delivery/gzip/etc
UI Layer - tags?
Modules (e.g. plugins)

Key Decisions
=============
Persistence
UI
Single mini-service or multiple?  UI inside service?
Graal is not supported with Hibernate now.   Ignore Graal for now.

Modules
=======
eframe (library) only
  org.simplemes.eframe.*
  /opt/git/mmes/eframe.git
mes-core
mes-assy
mes (appl)

Module JAR Support
==================
compile "org.simplemes:eframe"
Provides:
  Controllers
  Views
  Security Providers
  Domains
Dependencies:
  compile "io.micronaut:micronaut-security-jwt"



Package structure
=================
Option 1 org.simplemes.eframe
  application  (startup and common pages "/")
    controller
    domain
    service
  auth
    controller
    domain
  controller
  custom
    controller
    domain
  domain
  auth
    controller
    domain
  misc
  system
  test
  web
    request
    view
    builder
    widget


std layout
----------
  XYZ
    controller
    domain
    service
    page (GEB in test module)

views structure
===============
views
  auth/loginAuth, denied
  home/index
  includes
    header.hbs
src/assets
  css
  javascript
  images


Groovy vs. Kotlin
=================

Groovy is clearer.
GORM vs. JPA vs. Kotlin Expose



UI Decision
===========
JQX or Other Toolkit?
Toolkit Module?
Webix Notes:
  Look at https://snippet.webix.com/309867f6 for replacing sections of a page (e.g. dashboard) and form layout
  Look at https://snippet.webix.com/5e25f570 for form layout.
  https://snippet.webix.com/a674ca30 - Simulate a real login form.
  Input fields have unique ID generated.  Not easy to test.  $('#field') vs. $('div', view_id: 'field').find('input').  Module?
    Uses in Page: field { module(new InputFieldModule(id: 'field')) }
  Forms can't be submitted like normal.  Need JS code.
  Consider white-listing function calls in dynamic pages?

Webix Dashboard Activity Example
================================
     dash.y = function() {
       console.log("y()")
     };
     _json = {
       view: "button", value: "List", type: "form", click: "dash.y();", width: tk.width('33%')
     };

Page Mockups
============
  static content = {
    startButton {module(new ButtonModule(id: 'start'))}  //{ $('div', view_id: 'start').find('button')}
    panelA { $('div', view_id: 'PanelA')}
    panelB { $('div', view_id: 'PanelB')}
    resizer { $('div', view_id: 'resizerA')}
    //startButton { $('div', view_id: 'start')}  // Works
    //startButton { $('button')}  // adding view_id takes extra 32ms to find element.
  }




Needs
-----
Theme?
GEB Testable
Grid for inline editing.
  Resizable columns
  Sort order
  Hide column
Table - Display only
  Paging Support
  Resizable columns
  Sort order
  Hide column
Tree
  TaskMenu
  Logging
Splitter
Dialog - Modal
Widgets
  Date/Time
  Single/Multi-select Combobox with completion
Replaceable content with logic.


